# Default values for side-project-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: side-project-repo
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  # PSA restricted level requirements
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  # PSA restricted level requirements
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
    - ALL

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: "alb"
  annotations:
    # AWS Load Balancer Controller annotations
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    # Uncomment below for HTTPS with ACM certificate
    # alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    # alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:region:account-id:certificate/certificate-id
    # alb.ingress.kubernetes.io/ssl-redirect: '443'
    # Additional ALB configurations
    # alb.ingress.kubernetes.io/healthcheck-path: /health
    # alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    # alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    # alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    # alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
    # alb.ingress.kubernetes.io/success-codes: '200'
    # alb.ingress.kubernetes.io/tags: Environment=production,Team=platform
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

topologySpreadConstraints:
  - labelSelector:
      matchLabels:
        app.kubernetes.io/name: side-project-chart
        app.kubernetes.io/instance: {{ .Release.Name }}
    maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values:
          - side-project
      topologyKey: "topology.kubernetes.io/zone"
nodeAffinity:
  requiredDuringSchedulingIgnoredDuringExecution:
    nodeSelectorTerms:
    - matchExpressions:
      - key: managedBy
        operator: In
        values:
        - karpenter
      - key: nodepool
        operator: In
        values:
        - side-project
# Namespace configuration
namespace:
  # Specifies whether a namespace should be created
  create: true
  # The name of the namespace to use/create
  name: runtime
  # Labels to add to the namespace
  labels:
    # Pod Security Standards - choose one of: restricted, baseline, privileged
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/audit: baseline
    pod-security.kubernetes.io/warn: baseline
  # Annotations to add to the namespace
  annotations: {}

istio:
  enabled: false
  namespace: runtime
  ingressSelector: ingressgateway
  retries:
    attempts: 3
    perTryTimeout: 2s
  
  # Topology Aware Routing configuration
  # This ensures traffic stays within the same availability zone
  topologyAwareRouting:
    enabled: true
    # Outlier detection helps remove unhealthy endpoints from the load balancing pool
    outlierDetection:
      enabled: true
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
    # Distribute configuration: Keep traffic in the same zone
    # This uses a wildcard (*) to apply the rule to all zones
    # Traffic from any zone will stay 100% in that same zone
    distribute:
      - from: il-central-1a
        to:
          il-central-1a: 100
      - from: il-central-1b
        to:
          il-central-1b: 100
      - from: il-central-1c
        to:
          il-central-1c: 100
    # Enable failover: if one AZ is down, traffic fails over to the next specified AZ
    failover:
      - from: il-central-1a
        to: il-central-1b
      - from: il-central-1b
        to: il-central-1c
      - from: il-central-1c
        to: il-central-1a

# ArgoCD Rollout configuration
rollout:
  # Deployment strategy: canary or blueGreen
  strategy: canary
  # Number of old ReplicaSets to retain for rollback
  revisionHistoryLimit: 3
  
  # Canary strategy configuration
  canary:
    # Canary deployment steps
    steps:
      - setWeight: 20
      - pause: {duration: 30s}
      - setWeight: 40
      - pause: {duration: 30s}
      - setWeight: 60
      - pause: {duration: 30s}
      - setWeight: 80
      - pause: {duration: 30s}
    maxSurge: "25%"
    maxUnavailable: 0
    # Optional: Configure traffic routing (e.g., Istio, Nginx, ALB)
    # trafficRouting:
    #   istio:
    #     virtualService:
    #       name: side-project-vsvc
    #       routes:
    #         - primary
    # Optional: Configure analysis runs during canary
    # analysis:
    #   templates:
    #     - templateName: success-rate
    #   startingStep: 2
  
  # Blue-Green strategy configuration (alternative to canary)
  blueGreen:
    # Automatically promote new version without manual approval
    autoPromotionEnabled: false
    # Time to wait before scaling down the old version
    scaleDownDelaySeconds: 30
    # Enable preview service for testing before promotion (creates a separate preview-service.yaml)
    # Set to true if you want to test the new version at <service-name>-preview before promoting
    previewService: true
    # Optional: Run analysis before promoting
    # prePromotionAnalysis:
    #   templates:
    #     - templateName: smoke-tests
    # Optional: Run analysis after promoting
    # postPromotionAnalysis:
    #   templates:
    #     - templateName: smoke-tests
